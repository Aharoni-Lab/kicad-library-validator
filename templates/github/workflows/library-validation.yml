name: KiCad Library Validation

on:
  pull_request:
    paths:
      - 'symbols/**'
      - 'footprints/**'
      - '3dmodels/**'
      - 'docs/**'
      - 'structure.yaml'
      - '.github/workflows/library-validation.yml'
  push:
    branches:
      - main
    paths:
      - 'symbols/**'
      - 'footprints/**'
      - '3dmodels/**'
      - 'docs/**'
      - 'structure.yaml'
      - '.github/workflows/library-validation.yml'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for checking file changes

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install KiCad Library Validator
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/Aharoni-Lab/kicad-library-validator.git

  validate-and-update:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      structure_generated: ${{ steps.validate.outputs.structure_generated }}
      tables_updated: ${{ steps.validate.outputs.tables_updated }}
      changes_made: ${{ steps.validate.outputs.changes_made }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install KiCad Library Validator
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/Aharoni-Lab/kicad-library-validator.git

      - name: Validate and Update Library
        id: validate
        run: |
          # Initialize variables
          structure_generated=false
          tables_updated=false
          changes_made=false
          
          # Check if expected directories exist
          expected_dirs=("symbols" "footprints" "3dmodels" "docs" "tables")
          missing=0
          for dir in "${expected_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              missing=1
              break
            fi
          done
          
          # Create directory structure if missing
          if [ $missing -eq 1 ]; then
            echo "Directory structure missing. Running create_library_structure.py..."
            python -m kicad_lib_validator.utils.create_library_structure structure.yaml
            structure_generated=true
            changes_made=true
          fi
          
          # Generate tables
          echo "Generating library tables..."
          python -m kicad_lib_validator.utils.generate_library_tables structure.yaml --verbose > tables_output.txt
          
          # Check if tables were modified
          if git diff --quiet tables/; then
            echo "No changes to tables"
          else
            tables_updated=true
            changes_made=true
          fi
          
          # If any changes were made, commit them
          if [ "$changes_made" = true ]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add .
            git commit -m "Update library structure and tables [skip ci]"
            git push origin HEAD:${{ github.head_ref }}
          fi
          
          # Set outputs
          echo "structure_generated=$structure_generated" >> $GITHUB_OUTPUT
          echo "tables_updated=$tables_updated" >> $GITHUB_OUTPUT
          echo "changes_made=$changes_made" >> $GITHUB_OUTPUT
          
          # Save tables output for PR comment
          if [ "$tables_updated" = true ]; then
            echo "tables_output<<EOF" >> $GITHUB_OUTPUT
            cat tables_output.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

  generate-report:
    needs: validate-and-update
    runs-on: ubuntu-latest
    outputs:
      report_content: ${{ steps.report.outputs.report_content }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install KiCad Library Validator
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/Aharoni-Lab/kicad-library-validator.git

      - name: Generate Library Report
        id: report
        run: |
          python -m kicad_lib_validator.utils.generate_report . --verbose > report_output.txt
          echo "report_content<<EOF" >> $GITHUB_OUTPUT
          cat report_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  comment-pr:
    needs: [validate-and-update, generate-report]
    if: github.event.name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let comment = '## Library Validation Report\n\n' + `${{ needs.generate-report.outputs.report_content }}`;
            
            if ('${{ needs.validate-and-update.outputs.tables_updated }}' === 'true') {
              comment += '\n\n## Library Tables Update\n\n';
              comment += 'The following changes were made to the library tables:\n\n';
              comment += '${{ needs.validate-and-update.outputs.tables_output }}';
            }
            
            if ('${{ needs.validate-and-update.outputs.structure_generated }}' === 'true') {
              comment += '\n\n## Directory Structure Generated\n\n';
              comment += 'The KiCad library directory structure was automatically generated from structure.yaml.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }) 